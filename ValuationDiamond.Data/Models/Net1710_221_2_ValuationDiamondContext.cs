// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace ValuationDiamond.Data.Models;

public partial class Net1710_221_2_ValuationDiamondContext : DbContext
{
    public Net1710_221_2_ValuationDiamondContext()
    {
    }

    public Net1710_221_2_ValuationDiamondContext(DbContextOptions<Net1710_221_2_ValuationDiamondContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<ValuateDiamond> ValuateDiamonds { get; set; }

    public virtual DbSet<ValuationCertificate> ValuationCertificates { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64D8676AA080");

            entity.ToTable("Customer");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Avatar).HasMaxLength(200);
            entity.Property(e => e.Cccd)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CCCD");
            entity.Property(e => e.DoB).HasColumnType("date");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Order__C3905BCF55F130B4");

            entity.ToTable("Order");

            entity.Property(e => e.Day).HasColumnType("date");
            entity.Property(e => e.OrderCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Payment)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StaffName).HasMaxLength(255);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCustomer");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasKey(e => e.OrderDetailId).HasName("PK__OrderDet__D3B9D36CF606E4A3");

            entity.ToTable("OrderDetail");

            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DetailCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKOrder");

            entity.HasOne(d => d.Service).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKOrderDetailService");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__Service__C51BB00AEB822CB5");

            entity.ToTable("Service");

            entity.Property(e => e.Decription)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.StaffId).HasName("PK__Staff__96D4AB176ADE436C");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ValuateDiamond>(entity =>
        {
            entity.HasKey(e => e.ValuateDiamondId).HasName("PK__DiamondP__269074C77C7BB9A8");

            entity.ToTable("ValuateDiamond");

            entity.Property(e => e.Carat)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Clarity)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Color)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.DiamondType)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Shape)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Time).HasColumnType("datetime");
            entity.Property(e => e.ValuationStaffName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.OrderDetail).WithMany(p => p.ValuateDiamonds)
                .HasForeignKey(d => d.OrderDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKLOrderDetail");
        });

        modelBuilder.Entity<ValuationCertificate>(entity =>
        {
            entity.HasKey(e => e.ValuationCertificateId).HasName("PK__Valuatio__CF17CF32C49A58ED");

            entity.ToTable("ValuationCertificate");

            entity.Property(e => e.ValuationCertificateId).ValueGeneratedOnAdd();
            entity.Property(e => e.CustomerEmail)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.CustomerName)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.Day).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ManagerName)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.Sign)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ValuationCertificateNavigation).WithOne(p => p.ValuationCertificate)
                .HasForeignKey<ValuationCertificate>(d => d.ValuationCertificateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ValuationCertificate_ValuateDiamond1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}